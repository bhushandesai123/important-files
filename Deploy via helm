myapp-chart/
├── charts/
│   ├── mysql/                 # Optional: MySQL chart dependency (can use a Helm repo)
│   └── other-dependencies/    # Any other dependencies (if needed)
├── templates/
│   ├── frontend-deployment.yaml  # Kubernetes Deployment for React app
│   ├── frontend-service.yaml     # Service for React app
│   ├── backend-deployment.yaml   # Kubernetes Deployment for Java backend
│   ├── backend-service.yaml      # Service for Java backend
│   ├── mysql-deployment.yaml     # Deployment for MySQL (if not using dependency)
│   ├── mysql-service.yaml        # Service for MySQL
│   ├── ingress.yaml              # Ingress for frontend and backend
│   ├── configmap.yaml            # ConfigMap for environment variables
│   ├── secret.yaml               # Secret for sensitive information (DB credentials)
│   ├── _helpers.tpl              # Helper functions for templating
│   └── NOTES.txt                 # Post-install instructions
├── .helmignore                   # Files to ignore when packaging the chart
├── Chart.yaml                    # Metadata about the chart
├── values.yaml                   # Default configuration values for the chart
└── README.md                     # Documentation for the chart




Steps to Deploy Using Helm
Initialize the Chart:

Run helm create myapp-chart to create a basic chart structure.
Customize the generated templates to suit your React, Java, and MySQL components.
Configure values.yaml:

Add configuration settings specific to each component, such as:
yaml
Copy code
frontend:
  image: myorg/my-frontend:latest
  replicas: 1
  service:
    type: ClusterIP
    port: 80
backend:
  image: myorg/my-backend:latest
  replicas: 1
  service:
    type: ClusterIP
    port: 8080
  env:
    DB_HOST: mysql  # MySQL service name
    DB_USER: root
    DB_PASSWORD: mypassword
mysql:
  image: mysql:8.0
  rootPassword: mypassword
  service:
    type: ClusterIP
    port: 3306
ingress:
  enabled: true
  hostname: myapp.example.com
Configure frontend-deployment.yaml:
-------------------------
Define the Kubernetes Deployment for the React app:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "myapp.fullname" . }}-frontend
spec:
  replicas: {{ .Values.frontend.replicas }}
  selector:
    matchLabels:
      app: {{ include "myapp.fullname" . }}-frontend
  template:
    metadata:
      labels:
        app: {{ include "myapp.fullname" . }}-frontend
    spec:
      containers:
        - name: frontend
          image: {{ .Values.frontend.image }}
          ports:
            - containerPort: {{ .Values.frontend.service.port }}
Configure backend-deployment.yaml:
------------------------
Define the Kubernetes Deployment for the Java backend:
yaml
Copy code
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "myapp.fullname" . }}-backend
spec:
  replicas: {{ .Values.backend.replicas }}
  selector:
    matchLabels:
      app: {{ include "myapp.fullname" . }}-backend
  template:
    metadata:
      labels:
        app: {{ include "myapp.fullname" . }}-backend
    spec:
      containers:
        - name: backend
          image: {{ .Values.backend.image }}
          env:
            - name: DB_HOST
              value: {{ .Values.backend.env.DB_HOST }}
            - name: DB_USER
              value: {{ .Values.backend.env.DB_USER }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: myapp-db-secret
                  key: password
          ports:
            - containerPort: {{ .Values.backend.service.port }}
Create Secrets and ConfigMaps:
----------------------
Define a secret for storing sensitive information like the database password in secret.yaml:
yaml
Copy code
apiVersion: v1
kind: Secret
metadata:
  name: myapp-db-secret
type: Opaque
data:
  password: {{ .Values.backend.env.DB_PASSWORD | b64encode }}
Deploy the Chart:
------------------
Run helm install myapp myapp-chart to deploy the application.
Customize values with --set if needed, or provide a custom values.yaml file using -f.
Set Up Ingress (Optional):

If using an ingress controller, configure ingress.yaml for external access:
yaml
Copy code
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myapp-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: {{ .Values.ingress.hostname }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ include "myapp.fullname" . }}-frontend
                port:
                  number: {{ .Values.frontend.service.port }}
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: {{ include "myapp.fullname" . }}-backend
                port:
                  number: {{ .Values.backend.service.port }}

----------------
Package the Chart:

Run the following command in the root directory of your chart (myapp-chart) to create a .tgz package:
bash
Copy code
helm package myapp-chart
This command will generate a file called myapp-chart-<version>.tgz in the current directory, where <version> corresponds to the version defined in Chart.yaml.
Prepare to Upload to a Helm Repository:

If you have an existing Helm repository (e.g., hosted on GitHub Pages or an artifact repository like JFrog Artifactory), you can upload the packaged .tgz file directly.
Alternatively, you can use a hosted service or set up a Helm repository in GitHub Pages with these steps:
Create a GitHub repository (e.g., my-helm-repo).
Clone the repository locally:
bash
Copy code
git clone https://github.com/username/my-helm-repo.git
cd my-helm-repo
Move the packaged .tgz file to the repository:
bash
Copy code
mv ../myapp-chart-<version>.tgz .
Generate the Helm Repository Index:

Run the following command to create or update the index.yaml file, which Helm uses to track available charts:
bash
Copy code
helm repo index . --url https://username.github.io/my-helm-repo/
This command generates (or updates) index.yaml to include myapp-chart-<version>.tgz with its metadata.
Upload to GitHub Repository:

Add, commit, and push the .tgz and index.yaml files to your GitHub repository:
bash
Copy code
git add myapp-chart-<version>.tgz index.yaml
git commit -m "Add myapp-chart version <version>"
git push origin main
Add the Repository to Helm:

Now, anyone can add your Helm repository with the following command:
bash
Copy code
helm repo add my-repo https://username.github.io/my-helm-repo/
Update the local Helm repository index to fetch the latest charts:
bash
Copy code
helm repo update
Install the Chart from the Helm Repository:

Now that the chart is available in the repository, install it directly using:
bash
Copy code
helm install myapp my-repo/myapp-chart --version <version>
